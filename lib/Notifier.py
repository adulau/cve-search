from redis import Redis
from rq import Queue
from flask import render_template
from web.database import Notification
import re
import lib.Config as conf
from jinja2 import Environment, FileSystemLoader, select_autoescape
from marrow.mailer import Mailer, Message

class Template(object):
    """
        Jinja2 template rendering wrapper
    
        Load `template_file`, a Jinja2 Template, from `templates` directory
        and render to `output_file` using `render(output_file, [data_dict])`
    """
    TEMPLATE_DIRECTORY = 'web/templates'

    def __init__(self, *args, **kwargs):
        """
            Load the template in constructor
            template_file (str): defines the template file to load and render with.
        """
        # TODO: Improve Structure
        if kwargs.get('template_string') is not None:
            template_string = kwargs.get('template_string')
            template_environment = Environment()
            self.template = template_environment.from_string(template_string)
        elif kwargs.get('template_file') is not None:
            template_file = kwargs.get('template_file') 
            template_directory = kwargs.get('template_directory', self.TEMPLATE_DIRECTORY)
            template_environment = Environment(
                    loader=FileSystemLoader(template_directory),
                    autoescape=select_autoescape(['html', 'xml'])
                )
            self.template = template_environment.get_template(template_file)

    def render_template(self, *args, **kwargs):
        """
            Render the loaded template and write it to <output_file>.
        """
        data_dict = kwargs.get('data_dict', {})
        
        rendered_template = self.template.render(**kwargs)

        return rendered_template

confs = conf.Configuration()
sender = confs.getMailSender()
host = confs.getMailHost()
port = confs.getMailPort()
username = confs.getMailUsername()
password = confs.getMailPassword()
tls = confs.getMailTls()

mailer = Mailer(dict(
        transport = dict(
                use = 'smtp',
                host = host,
                port = port,
                tls = tls,
                username=username,
                password=password)))

q = Queue(connection=Redis(host=confs.getRedisHost()))

def send_email(to, subject, template, **kwargs):
    mailer.start()
    template_plain = Template(template_file=template + '.txt')
    template_rich = Template(template_file=template + '.html')
    message = Message(
        author=sender, 
        to=to, 
        subject=subject,
        plain=template_plain.render_template(**kwargs),
        rich=template_rich.render_template(**kwargs)
    )
    s = mailer.send(message)
    mailer.stop()
    return s
    
def add_cve_notif(cve, notif):
    q.enqueue(send_notif, cve, notif)

def send_notif(cve, notif):
    send_email(notif.email, 'CVE Alert', 'cve-notif', cve=cve)

def VerifyCve(cve):
    vuln_conf = cve['vulnerable_configuration']
    notifications = Notification.query.all()
    for notif in notifications:
        for conf in vuln_conf:
            if notif.product == '':
                req = ':' + notif.vendor + ':'
            else:
                req = notif.vendor + ':' + notif.product + ':' + notif.version
            
            match = re.search(req, conf)
            if match:
                add_cve_notif(cve, notif)
                break